// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user") // user, admin, super_admin
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  organizations Organization[]
  products      Product[]
  priceAlerts   PriceAlert[]
  subscriptions Subscription[]
  apiKeys       ApiKey[]
  organizationMembers OrganizationMember[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  industry    String?
  size        String? // small, medium, large, enterprise
  stripeCustomerId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  products    Product[]
  members     OrganizationMember[]
  subscriptions Subscription[]
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           String   @default("member") // owner, admin, member, viewer
  joinedAt       DateTime @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String?
  category    String?
  brand       String?
  image       String?
  url         String?
  yourPrice   Float?
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  competitorData CompetitorData[]
  priceAlerts    PriceAlert[]
  trackingJobs   TrackingJob[]
}

model CompetitorData {
  id            String   @id @default(cuid())
  competitor    String
  productName   String
  currentPrice  Float
  previousPrice Float?
  priceChange   Float?
  lastUpdated   DateTime @default(now())
  source        String
  availability  Boolean  @default(true)
  currency      String   @default("USD")
  shipping      Float?
  rating        Float?
  reviewCount   Int?
  url           String
  metadata      Json?    // Additional competitor-specific data

  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([competitor, productId, lastUpdated])
}

model PriceAlert {
  id           String   @id @default(cuid())
  competitor   String
  productName  String
  oldPrice     Float
  newPrice     Float
  changePercent Float
  timestamp    DateTime @default(now())
  severity     String   // high, medium, low
  threshold    Float
  isRead       Boolean  @default(false)
  isResolved   Boolean  @default(false)
  notes        String?

  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrackingJob {
  id              String   @id @default(cuid())
  productId       String
  competitors     String // JSON string of competitor names
  intervalMinutes Int      @default(15)
  isActive        Boolean  @default(true)
  lastRun         DateTime?
  nextRun         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String   @id @default(cuid())
  organizationId     String
  userId             String
  stripeCustomerId   String?
  stripeSubscriptionId String?
  stripePriceId      String?
  status             String   // active, canceled, past_due, etc.
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String // JSON string of permissions
  isActive    Boolean  @default(true)
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webhook {
  id          String   @id @default(cuid())
  url         String
  events      String // JSON string of event types
  isActive    Boolean  @default(true)
  secret      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveries  WebhookDelivery[]
}

model WebhookDelivery {
  id        String   @id @default(cuid())
  webhookId String
  event     String
  payload   Json
  response  Json?
  status    Int?
  duration  Int? // milliseconds
  createdAt DateTime @default(now())

  webhook   Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
} 